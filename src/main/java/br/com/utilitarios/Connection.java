/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.utilitarios;

import java.io.Serializable;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Felipe L. Garcia
 */
public class Connection implements Serializable{
    private java.sql.Connection connSQL;
    private List<java.sql.Connection> tempConn;
    
    private long timeIni;
    private long timeLast;
    private String log;
    
    private String dataBase;
    private String url;
    private String user;
    private String password;
    private String driver;
    
    private boolean upperCaseTable;
    private boolean verifSQL;
    private boolean fixConn;
    private boolean autoCommit=true;
    
    public Connection() {
        tempConn = new ArrayList<>();
    }
  
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        
        return prepareStatement(sql, ResultSet.TYPE_FORWARD_ONLY
                                    ,ResultSet.CONCUR_READ_ONLY
                                    ,ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType,
            int resultSetConcurrency) throws SQLException {
        
        return prepareStatement(sql, resultSetType
                                    ,resultSetConcurrency
                                    ,ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType
                                            ,int resultSetConcurrency
                                        , int resultSetHoldability) throws SQLException {
        
//        sql = UteisMetodos.getISO885915(sql);
//        
//        if(!UteisSQL.validate(sql)){
//            throw new SQLException("Erro CHARSET SQL"+ sql);
//        }
        if (!fixConn || isClosed() || this.connSQL == null) {
            UteisConnect.getConn(this);

            if (this.connSQL == null) {
                throw new SQLException(this.getLog());
            }
            this.connSQL.setAutoCommit(autoCommit);
        }
        timeLast = System.currentTimeMillis();
        
        sql = UteisSQL.getCase(sql,upperCaseTable,this.connSQL);
        UteisSQL.verificate(sql);

        PreparedStatement statement = new PreparedStatement(
                this.connSQL.prepareStatement(sql, resultSetType
                        , resultSetConcurrency, resultSetHoldability)){

            @Override
            public ResultSet executeQuery() throws SQLException {
                timeLast = System.currentTimeMillis();
                return super.executeQuery();
            }
        };
        statement.setConnection(connSQL);
        statement.setFixConn(fixConn);
        //USADO EM DATES
//        statement.setCalendar(Calendar.getInstance(
//                TimeZone.getTimeZone("America/Sao_Paulo")
//                                , new Locale("pt","BR")));
        
        if (verifSQL) {
            statement.setColumns(UteisSQL.getColumns(sql));
        }
        
        return statement;
    }
    
    public PreparedStatement prepareStatement(String sql,int autoGeneratedKeys) throws SQLException{
        if (!fixConn) {
            UteisConnect.getConn(this);
        }
        
        if (this.connSQL==null) {
            throw new SQLException(this.getLog());
        } else {
            timeLast = System.currentTimeMillis();
        }

        PreparedStatement statement = new PreparedStatement(this.connSQL.prepareStatement(sql,autoGeneratedKeys)){
            @Override
            public ResultSet executeQuery() throws SQLException {
                timeLast = System.currentTimeMillis();
                return super.executeQuery();
            }
        };
        statement.setConnection(connSQL);
        statement.setFixConn(fixConn);
        
        return statement;
    }

    public void setFixConn(boolean fixConn) {
        this.fixConn = fixConn;
    }
    
    public void commit() {
        if(this.connSQL==null){
            return ;
        }
        for (java.sql.Connection c : tempConn) {
            try {
                c.commit();
            } catch (SQLException sQLException) {
            }
        }
    }
    
    public void rollback(){
        if(this.connSQL==null){
            return ;
        }
        
        for (java.sql.Connection c : tempConn) {
            try {
                c.rollback();
            } catch (SQLException sQLException) {
            }
        }
       
    }
    
    public void setAutoCommit(boolean autoCommit) {
        this.autoCommit = autoCommit;
    }
    
    public void setSavepoint() throws SQLException{
        if(this.connSQL==null){
            return ;
        }
        this.connSQL.setSavepoint();
    }
    
    public void close() {
        if(this.connSQL==null){
            return ;
        }
        
        for (java.sql.Connection c : tempConn) {
            try {
                c.close();
            } catch (SQLException ex) {
//            System.out.println(ex.getLocalizedMessage());
            }
        }
    }
    
    public boolean isClosed() throws SQLException{
        if(this.connSQL==null){
            return true;
        }
        return this.connSQL.isClosed();
    }

    public String getDriver() {
        return driver;
    }

    public void setDriver(String driver) {
        this.driver = driver;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public boolean isFixConn() {
        return fixConn;
    }

    public boolean isAutoCommit() {
        return autoCommit;
    }

    public String getPassword() {
        return password;
    }

    public String getUser() {
        return user;
    }
    
    public String getHost() {
        if (dataBase == null) {
            return null;
        }
        String port = getPort()+"";        
        String host = dataBase.replaceAll(port, "");
        
        String local = getLocalDb();
        CharSequence c = local.subSequence(0, local.length());
        
        host = host.replace(c, "");
        host = host.replaceAll("\\/|\\:|\\\\", "");
        
        return host;
    }
    
    public int getPort() {
        if(dataBase==null){
            return 0;
        }
        String local = getLocalDb();
        CharSequence c = local.subSequence(0, local.length());
        
        String prefix = dataBase.replace(c,"");
        String port = new Regex("\\:([0-9]{4})\\/").get(prefix,0);
        port = port.replaceAll("[^0-9]", "");
        
        return Integer.valueOf(port);
    }
    
    public String getLocalDb() {
        if (dataBase == null) {
            return null;
        }
        int idx = new Regex("\\:[0-9]{4}\\/").findEnd(dataBase);
        if(idx < 0){
            return "";
        }
        return dataBase.substring(idx);
    }
    
    public String getDataBase() {
        return dataBase;
    }

    public void setDataBase(String dataBase) {
        this.dataBase = dataBase;        
    }

    public String getLog() {
        return log;
    }

    public void setUpperCaseTable(boolean upperCaseTable) {
        this.upperCaseTable = upperCaseTable;
    }

    public void setLog(String log) {
        this.log = log;
    }

    public long getTimeIni() {
        return timeIni;
    }

    public long getTimeLast() {
        if(timeLast==0){//NAO FOI UTILIZADA AINDA
            return timeIni;
        }
        return timeLast;
    }
    
    public boolean setConnection(java.sql.Connection c) {
        if(c==null ){
           return false; 
        }
        if(this.connSQL==null || !this.connSQL.equals(c)){
            timeIni = System.currentTimeMillis();
        }
        this.connSQL = c;
        this.tempConn.add(c);
        
        return true;
    }
    
    public boolean isConnected(){
        if(this.connSQL==null){
            return false;
        }
        try {
            return (!this.connSQL.isClosed());
        } catch (Exception e) {
        }
        return false;
    }
    
//    public java.sql.Connection getConnSQL() {
//        return connSQL;
//    }
        
}
